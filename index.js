"use strict";
var Promise = require("bluebird");
var child_process_1 = require("child_process");
var fs_1 = require("fs");
function getPercentSpace(dir) {
    return new Promise(function (resolve, reject) {
        child_process_1.exec("df -h " + dir + " | grep '/'", function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                var reout = [];
                for (var i = 0; i < stdout.split(" ").length; i++) {
                    if (stdout.split(" ")[i])
                        reout.push(stdout.split(" ")[i].replace('\n', ''));
                }
                resolve(reout[4].replace('%', ''));
            }
        });
    });
}
function removeLastFileFromDir(dir) {
    return new Promise(function (resolve, reject) {
        var fis = fs_1.readdirSync(dir);
        var files = [];
        for (var i = 0; i < fis.length; i++) {
            if (!fs_1.statSync(dir + "/" + fis[i]).isDirectory()) {
                files.push(fis[i]);
            }
        }
        if (files.length > 1) {
            files.sort(function (a, b) {
                return fs_1.statSync(dir + "/" + a).mtime.getTime() -
                    fs_1.statSync(dir + "/" + b).mtime.getTime();
            });
            child_process_1.exec("rm '" + dir + "/" + files[0] + "'", function (err, stdout, stderr) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(true);
                }
            });
        }
        else {
            reject("nothing to remove!");
        }
    });
}
function remfiles(dir) {
    return new Promise(function (resolve, reject) {
        function recursiveremfiles(dir) {
            getPercentSpace(dir).then(function (percent) {
                if (percent > 10) {
                    removeLastFileFromDir(dir).then(function () {
                        recursiveremfiles(dir);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    resolve(true);
                }
            }).catch(function (err) {
                reject(err);
            });
        }
        recursiveremfiles(dir);
    });
}
function checkSpaceInDir(dir, options) {
    return new Promise(function (resolve, reject) {
        if (!dir) {
            if (options && options.verbose)
                console.error("No dir provided");
            reject("No dir provided");
        }
        else {
            if (options && options.verbose)
                console.log("checking disk");
            getPercentSpace(dir).then(function (percent) {
                if (percent > 10) {
                    remfiles(dir).then(function (a) {
                        if (options && options.verbose)
                            console.log("space cleaned");
                        resolve(a);
                    }).catch(function (err) {
                        if (options && options.verbose)
                            console.error(err);
                        reject(err);
                    });
                }
                else {
                    if (options && options.verbose)
                        console.log("disk checked");
                    resolve("disk ok, nothing to do");
                }
            }).catch(function (err) {
                reject(err);
            });
        }
    });
}
exports.checkSpaceInDir = checkSpaceInDir;
var recursivecheckSpaceInDir = (function () {
    function recursivecheckSpaceInDir(options) {
        if (!options) {
            throw Error("No dir provided");
        }
        else {
            this.dir = options.dir;
            if (!options.interval)
                options.interval = 5 * 60;
            this.interval = options.interval;
            if (!options.extension)
                this.extension = options.extension;
            this.verbose = false;
            if (options.verbose)
                this.verbose = options.verbose;
        }
    }
    recursivecheckSpaceInDir.prototype.run = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            checkSpaceInDir(that.dir, { extension: that.extension, verbose: that.verbose }).then(function (a) {
                if (that.verbose)
                    console.log("disk check ok");
                resolve(a);
            }).then(function (err) {
                if (that.verbose)
                    console.error(err);
                reject(err);
            });
        });
    };
    recursivecheckSpaceInDir.prototype.daemonize = function (interval) {
        if (interval)
            this.interval = interval;
        var that = this;
        that.run();
        setInterval(function () {
            that.run();
        }, this.interval);
    };
    return recursivecheckSpaceInDir;
}());
exports.recursivecheckSpaceInDir = recursivecheckSpaceInDir;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
