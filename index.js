"use strict";
var Promise = require("bluebird");
function checkSpaceInDir(options) {
    return new Promise(function (resolve, reject) {
        if (!options) {
            if (options.verbose)
                console.error("No dir provided");
            reject("No dir provided");
        }
        else {
            if (options.verbose)
                console.log("checking disk");
        }
    });
}
exports.checkSpaceInDir = checkSpaceInDir;
var recursivecheckSpaceInDir = (function () {
    function recursivecheckSpaceInDir(options) {
        if (!options) {
            throw Error("No dir provided");
        }
        else {
            this.dir = options.dir;
            if (!options.interval)
                options.interval = 5 * 60;
            this.interval = options.interval;
            if (!options.extension)
                this.extension = options.extension;
            this.verbose = false;
            if (options.verbose)
                this.verbose = options.verbose;
        }
    }
    recursivecheckSpaceInDir.prototype.run = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            checkSpaceInDir({ dir: that.dir, extension: that.extension, verbose: that.verbose }).then(function (a) {
                if (that.verbose)
                    console.log("disk check ok");
                resolve(a);
            }).then(function (err) {
                if (that.verbose)
                    console.error(err);
                reject(err);
            });
        });
    };
    recursivecheckSpaceInDir.prototype.daemonize = function (interval) {
        if (interval)
            this.interval = interval;
        var that = this;
        that.run();
        setInterval(function () {
            that.run();
        }, this.interval);
    };
    return recursivecheckSpaceInDir;
}());
exports.recursivecheckSpaceInDir = recursivecheckSpaceInDir;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxrQ0FBbUM7QUFFbkMseUJBQWdDLE9BQStEO0lBRTNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBRy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUVYLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1lBRXJELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBRTdCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUVKLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQVVyRCxDQUFDO0lBRUwsQ0FBQyxDQUFDLENBQUE7QUFFTixDQUFDO0FBM0JELDBDQTJCQztBQUdEO0lBS0ksa0NBQVksT0FBK0U7UUFFdkYsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRVgsTUFBTSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUVsQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFFSixJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUE7WUFHdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO2dCQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNoRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUE7WUFFaEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2dCQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQTtZQUUxRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtZQUNwQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQTtRQUd2RCxDQUFDO0lBR0wsQ0FBQztJQUdELHNDQUFHLEdBQUg7UUFDSSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUE7UUFDakIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFFL0IsZUFBZSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUM7Z0JBQ3hGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7b0JBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtnQkFDOUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2QsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRztnQkFDUixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO29CQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNmLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsNENBQVMsR0FBVCxVQUFVLFFBQWlCO1FBQ3ZCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBRXRDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQTtRQUdqQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDVixXQUFXLENBQUM7WUFDUixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDZCxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBRXJCLENBQUM7SUFFTCwrQkFBQztBQUFELENBMURBLEFBMERDLElBQUE7QUExRFksNERBQXdCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cblxuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIlxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tTcGFjZUluRGlyKG9wdGlvbnM6IHsgZGlyOiBzdHJpbmcsIGV4dGVuc2lvbj86IHN0cmluZywgdmVyYm9zZT86IGJvb2xlYW4gfSkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuXG4gICAgICAgIGlmICghb3B0aW9ucykge1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy52ZXJib3NlKSBjb25zb2xlLmVycm9yKFwiTm8gZGlyIHByb3ZpZGVkXCIpXG5cbiAgICAgICAgICAgIHJlamVjdChcIk5vIGRpciBwcm92aWRlZFwiKVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnZlcmJvc2UpIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgZGlza1wiKVxuXG5cbiAgICAgICAgICAgIC8vIGNoZWNrIHBhcnRpdGlvbiBpbiB3aGljaCB0aGVyZSBpcyB0aGF0IGZvbGRlclxuICAgICAgICAgICAgLy8gY2hlY2sgcGFydGl0aW9uIGZyZWUgc3BhY2VcbiAgICAgICAgICAgIC8vIHJlbW92ZSBmaWxlcyAoYmFzZWQgb24gZXh0ZW5zaW9uIGlmIGV4dGVuc2lvbiBpcyBwcm92aWRlZCksIGJ5IG1vZGlmaWVkIHRpbWVcblxuXG5cblxuICAgICAgICB9XG5cbiAgICB9KVxuXG59XG5cblxuZXhwb3J0IGNsYXNzIHJlY3Vyc2l2ZWNoZWNrU3BhY2VJbkRpciB7XG4gICAgZGlyOiBzdHJpbmdcbiAgICBleHRlbnNpb24/OiBzdHJpbmdcbiAgICBpbnRlcnZhbDogbnVtYmVyXG4gICAgdmVyYm9zZTogYm9vbGVhblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHsgZGlyOiBzdHJpbmcsIGV4dGVuc2lvbj86IHN0cmluZywgaW50ZXJ2YWw/OiBudW1iZXIsIHZlcmJvc2U/OiB0cnVlIH0pIHtcblxuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcblxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJObyBkaXIgcHJvdmlkZWRcIilcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB0aGlzLmRpciA9IG9wdGlvbnMuZGlyXG5cblxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmludGVydmFsKSBvcHRpb25zLmludGVydmFsID0gNSAqIDYwXG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gb3B0aW9ucy5pbnRlcnZhbFxuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZXh0ZW5zaW9uKSB0aGlzLmV4dGVuc2lvbiA9IG9wdGlvbnMuZXh0ZW5zaW9uXG5cbiAgICAgICAgICAgIHRoaXMudmVyYm9zZSA9IGZhbHNlXG4gICAgICAgICAgICBpZiAob3B0aW9ucy52ZXJib3NlKSB0aGlzLnZlcmJvc2UgPSBvcHRpb25zLnZlcmJvc2VcblxuXG4gICAgICAgIH1cblxuXG4gICAgfVxuXG5cbiAgICBydW4oKSB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIGNoZWNrU3BhY2VJbkRpcih7IGRpcjogdGhhdC5kaXIsIGV4dGVuc2lvbjogdGhhdC5leHRlbnNpb24sIHZlcmJvc2U6IHRoYXQudmVyYm9zZSB9KS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQudmVyYm9zZSkgY29uc29sZS5sb2coXCJkaXNrIGNoZWNrIG9rXCIpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhKVxuICAgICAgICAgICAgfSkudGhlbigoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQudmVyYm9zZSkgY29uc29sZS5lcnJvcihlcnIpXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZGFlbW9uaXplKGludGVydmFsPzogbnVtYmVyKSB7XG4gICAgICAgIGlmIChpbnRlcnZhbCkgdGhpcy5pbnRlcnZhbCA9IGludGVydmFsXG5cbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXNcblxuXG4gICAgICAgIHRoYXQucnVuKClcbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhhdC5ydW4oKVxuICAgICAgICB9LCB0aGlzLmludGVydmFsKVxuXG4gICAgfVxuXG59Il19
