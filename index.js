"use strict";
var Promise = require("bluebird");
var child_process_1 = require("child_process");
var fs_1 = require("fs");
function getPercentSpace(dir) {
    return new Promise(function (resolve, reject) {
        child_process_1.exec("df -h " + dir + " | grep '/'", function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                var reout = [];
                for (var i = 0; i < stdout.split(" ").length; i++) {
                    if (stdout.split(" ")[i])
                        reout.push(stdout.split(" ")[i].replace('\n', ''));
                }
                resolve(reout[4].replace('%', ''));
            }
        });
    });
}
function removeLastFileFromDir(dir) {
    return new Promise(function (resolve, reject) {
        var files = fs_1.readdirSync(dir);
        files.sort(function (a, b) {
            return fs_1.statSync(dir + "/" + a).mtime.getTime() -
                fs_1.statSync(dir + "/" + b).mtime.getTime();
        });
        child_process_1.exec("rm " + files[0], function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve(true);
            }
        });
    });
}
function remfiles(dir) {
    return new Promise(function (resolve, reject) {
        function recursiveremfiles(dir) {
            getPercentSpace(dir).then(function (percent) {
                if (percent > 90) {
                    removeLastFileFromDir(dir).then(function () {
                        recursiveremfiles(dir);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    resolve(true);
                }
            }).catch(function (err) {
                reject(err);
            });
        }
    });
}
function checkSpaceInDir(dir, options) {
    return new Promise(function (resolve, reject) {
        if (!dir) {
            if (options && options.verbose)
                console.error("No dir provided");
            reject("No dir provided");
        }
        else {
            if (options && options.verbose)
                console.log("checking disk");
            getPercentSpace(dir).then(function (percent) {
                if (percent > 90) {
                    remfiles(dir).then(function (a) {
                        if (options && options.verbose)
                            console.log("space cleaned");
                        resolve(a);
                    }).catch(function (err) {
                        if (options && options.verbose)
                            console.error(err);
                        reject(err);
                    });
                }
                else {
                    if (options && options.verbose)
                        console.log("disk checked");
                    resolve("disk ok, nothing to do");
                }
            }).catch(function (err) {
                reject(err);
            });
        }
    });
}
exports.checkSpaceInDir = checkSpaceInDir;
var recursivecheckSpaceInDir = (function () {
    function recursivecheckSpaceInDir(options) {
        if (!options) {
            throw Error("No dir provided");
        }
        else {
            this.dir = options.dir;
            if (!options.interval)
                options.interval = 5 * 60;
            this.interval = options.interval;
            if (!options.extension)
                this.extension = options.extension;
            this.verbose = false;
            if (options.verbose)
                this.verbose = options.verbose;
        }
    }
    recursivecheckSpaceInDir.prototype.run = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            checkSpaceInDir(that.dir, { extension: that.extension, verbose: that.verbose }).then(function (a) {
                if (that.verbose)
                    console.log("disk check ok");
                resolve(a);
            }).then(function (err) {
                if (that.verbose)
                    console.error(err);
                reject(err);
            });
        });
    };
    recursivecheckSpaceInDir.prototype.daemonize = function (interval) {
        if (interval)
            this.interval = interval;
        var that = this;
        that.run();
        setInterval(function () {
            that.run();
        }, this.interval);
    };
    return recursivecheckSpaceInDir;
}());
exports.recursivecheckSpaceInDir = recursivecheckSpaceInDir;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LFFBQVEsQ0FBQyxDQUFBO0lBRXJCLENBQUM7SUFFTCwrQkFBQztBQUFELENBMURBLEFBMERDLElBQUE7QUExRFksNERBQXdCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cblxuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIlxuaW1wb3J0IHsgZXhlYyB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCJcbmltcG9ydCB7IHJlYWRkaXJTeW5jLCBzdGF0U3luYyB9IGZyb20gXCJmc1wiXG5cbmZ1bmN0aW9uIGdldFBlcmNlbnRTcGFjZShkaXI6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgZXhlYyhcImRmIC1oIFwiICsgZGlyICsgXCIgfCBncmVwICcvJ1wiLCAoZXJyLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVvdXQgPSBbXVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Rkb3V0LnNwbGl0KFwiIFwiKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Rkb3V0LnNwbGl0KFwiIFwiKVtpXSkgcmVvdXQucHVzaChzdGRvdXQuc3BsaXQoXCIgXCIpW2ldLnJlcGxhY2UoJ1xcbicsICcnKSlcbiAgICAgICAgICAgICAgICB9XG5cblxuXG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlb3V0WzRdLnJlcGxhY2UoJyUnLCAnJykpXG5cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG5cbiAgICB9KVxuXG59XG5cblxuXG5mdW5jdGlvbiByZW1vdmVMYXN0RmlsZUZyb21EaXIoZGlyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG5cbiAgICAgICAgY29uc3QgZmlsZXMgPSByZWFkZGlyU3luYyhkaXIpO1xuICAgICAgICBmaWxlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdFN5bmMoZGlyICsgXCIvXCIgKyBhKS5tdGltZS5nZXRUaW1lKCkgLVxuICAgICAgICAgICAgICAgIHN0YXRTeW5jKGRpciArIFwiL1wiICsgYikubXRpbWUuZ2V0VGltZSgpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIGV4ZWMoXCJybSBcIiArIGZpbGVzWzBdLCAoZXJyLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuXG4gICAgfSlcblxufVxuXG5mdW5jdGlvbiByZW1maWxlcyhkaXI6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVjdXJzaXZlcmVtZmlsZXMoZGlyOiBzdHJpbmcpIHtcblxuICAgICAgICAgICAgZ2V0UGVyY2VudFNwYWNlKGRpcikudGhlbigocGVyY2VudCkgPT4ge1xuXG5cbiAgICAgICAgICAgICAgICBpZiAocGVyY2VudCA+IDkwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTGFzdEZpbGVGcm9tRGlyKGRpcikudGhlbigoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2l2ZXJlbWZpbGVzKGRpcilcblxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKVxuICAgICAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9XG4gICAgfSlcblxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1NwYWNlSW5EaXIoZGlyOiBzdHJpbmcsIG9wdGlvbnM/OiB7IGV4dGVuc2lvbj86IHN0cmluZywgdmVyYm9zZT86IGJvb2xlYW4gfSkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuXG4gICAgICAgIGlmICghZGlyKSB7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudmVyYm9zZSkgY29uc29sZS5lcnJvcihcIk5vIGRpciBwcm92aWRlZFwiKVxuXG4gICAgICAgICAgICByZWplY3QoXCJObyBkaXIgcHJvdmlkZWRcIilcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnZlcmJvc2UpIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgZGlza1wiKVxuXG5cblxuXG4gICAgICAgICAgICAvLyByZW1vdmUgZmlsZXMgKGJhc2VkIG9uIGV4dGVuc2lvbiBpZiBleHRlbnNpb24gaXMgcHJvdmlkZWQpLCBieSBtb2RpZmllZCB0aW1lXG5cblxuICAgICAgICAgICAgZ2V0UGVyY2VudFNwYWNlKGRpcikudGhlbigocGVyY2VudCkgPT4ge1xuXG5cbiAgICAgICAgICAgICAgICBpZiAocGVyY2VudCA+IDkwKSB7XG5cblxuXG5cbiAgICAgICAgICAgICAgICAgICAgcmVtZmlsZXMoZGlyKS50aGVuKChhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudmVyYm9zZSkgY29uc29sZS5sb2coXCJzcGFjZSBjbGVhbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGEpXG5cbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy52ZXJib3NlKSBjb25zb2xlLmVycm9yKGVycilcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgICAgICAgICB9KVxuXG5cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudmVyYm9zZSkgY29uc29sZS5sb2coXCJkaXNrIGNoZWNrZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcImRpc2sgb2ssIG5vdGhpbmcgdG8gZG9cIilcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICB9KVxuXG5cblxuXG4gICAgICAgIH1cblxuICAgIH0pXG5cbn1cblxuXG5leHBvcnQgY2xhc3MgcmVjdXJzaXZlY2hlY2tTcGFjZUluRGlyIHtcbiAgICBkaXI6IHN0cmluZ1xuICAgIGV4dGVuc2lvbj86IHN0cmluZ1xuICAgIGludGVydmFsOiBudW1iZXJcbiAgICB2ZXJib3NlOiBib29sZWFuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogeyBkaXI6IHN0cmluZywgZXh0ZW5zaW9uPzogc3RyaW5nLCBpbnRlcnZhbD86IG51bWJlciwgdmVyYm9zZT86IHRydWUgfSkge1xuXG4gICAgICAgIGlmICghb3B0aW9ucykge1xuXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5vIGRpciBwcm92aWRlZFwiKVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHRoaXMuZGlyID0gb3B0aW9ucy5kaXJcblxuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuaW50ZXJ2YWwpIG9wdGlvbnMuaW50ZXJ2YWwgPSA1ICogNjBcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBvcHRpb25zLmludGVydmFsXG5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5leHRlbnNpb24pIHRoaXMuZXh0ZW5zaW9uID0gb3B0aW9ucy5leHRlbnNpb25cblxuICAgICAgICAgICAgdGhpcy52ZXJib3NlID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnZlcmJvc2UpIHRoaXMudmVyYm9zZSA9IG9wdGlvbnMudmVyYm9zZVxuXG5cbiAgICAgICAgfVxuXG5cbiAgICB9XG5cblxuICAgIHJ1bigpIHtcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXNcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgY2hlY2tTcGFjZUluRGlyKHRoYXQuZGlyLCB7IGV4dGVuc2lvbjogdGhhdC5leHRlbnNpb24sIHZlcmJvc2U6IHRoYXQudmVyYm9zZSB9KS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQudmVyYm9zZSkgY29uc29sZS5sb2coXCJkaXNrIGNoZWNrIG9rXCIpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhKVxuICAgICAgICAgICAgfSkudGhlbigoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQudmVyYm9zZSkgY29uc29sZS5lcnJvcihlcnIpXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZGFlbW9uaXplKGludGVydmFsPzogbnVtYmVyKSB7XG4gICAgICAgIGlmIChpbnRlcnZhbCkgdGhpcy5pbnRlcnZhbCA9IGludGVydmFsXG5cbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXNcblxuXG4gICAgICAgIHRoYXQucnVuKClcbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhhdC5ydW4oKVxuICAgICAgICB9LCB0aGlzLmludGVydmFsKVxuXG4gICAgfVxuXG59Il19
